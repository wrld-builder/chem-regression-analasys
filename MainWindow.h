#ifndef MAINWINDOW_H
#define MAINWINDOW_H

#include <windows.h>

#include <vector>

#include "ChemCalculation.h"
#include "Constants.h"

/**
 * \file MainWindow.h
 * \brief Определение класса MainWindow для главного окна приложения.
 *
 * Этот файл содержит объявление класса \c MainWindow, который отвечает за:
 * - Создание главного окна приложения.
 * - Инициализацию и размещение всех дочерних элементов управления.
 * - Обработку сообщений окна (WM_CREATE, WM_PAINT, WM_COMMAND, WM_MOUSEMOVE,
 * WM_DESTROY и др.).
 * - Запуск расчёта параметров химической реакции и обновление графика.
 *
 * \author Шунин Михаил Дмитриевич
 * \date Февраль 2025
 */

/**
 * \brief Класс главного окна приложения.
 *
 * Данный класс отвечает за создание главного окна, всех дочерних элементов,
 * обработку сообщений (например, WM_CREATE, WM_PAINT, WM_COMMAND, WM_MOUSEMOVE
 * и т.д.), а также за запуск расчёта и обновление графика.
 */
class MainWindow {
 public:
  /**
   * \brief Конструктор по умолчанию.
   *
   * Инициализирует поля класса значениями по умолчанию:
   * - m_nPoints устанавливается в 5.
   * - Начальные концентрации m_Cb и m_Cc устанавливаются в 0.0.
   * - Параметры расчёта (m_n, m_k, m_r, m_disp) устанавливаются в 0.0.
   * - Флаг m_inChartArea устанавливается в false.
   * - Флаг m_initializing устанавливается в true, сигнализируя о процессе
   * начальной инициализации. Также производится резервирование памяти для
   * векторов дескрипторов полей ввода.
   */
  MainWindow();

  /**
   * \brief Деструктор.
   */
  ~MainWindow();

  /**
   * \brief Регистрирует класс окна и создаёт главное окно приложения.
   *
   * Функция регистрирует класс окна с помощью метода \c RegisterWindowClass,
   * затем создаёт окно, передавая указатель на текущий объект в параметрах
   * создания, что позволяет получить к нему доступ через GWLP_USERDATA.
   *
   * \param hInstance Дескриптор экземпляра приложения.
   * \return \c true, если окно создано успешно, иначе \c false.
   */
  bool Create(HINSTANCE hInstance);

  /**
   * \brief Запускает цикл обработки сообщений.
   *
   * Функция инициирует стандартный цикл обработки сообщений Windows, который
   * продолжается, пока не поступит сообщение о завершении приложения.
   */
  void MessageLoop();

  /**
   * \brief Возвращает дескриптор главного окна.
   *
   * \return Дескриптор окна.
   */
  HWND GetHwnd() const { return m_hWnd; }

  // Данные, используемые для рисования и расчёта:
  std::vector<HWND>
      m_EditsCa;  ///< Массив дескрипторов для полей ввода значений Ca.
  std::vector<HWND>
      m_EditsTm;  ///< Массив дескрипторов для полей ввода значений t.

  HWND m_hPointsEdit;  ///< Поле ввода для количества точек.
  HWND m_hCbEdit;  ///< Поле ввода для начальной концентрации Cb.
  HWND m_hCcEdit;  ///< Поле ввода для начальной концентрации Cc.
  HWND m_hCoordLabel;  ///< Метка для отображения координат курсора.

  // Параметры расчёта (результаты)
  double m_n;  ///< Рассчитанный порядок реакции.
  double m_k;  ///< Рассчитанная константа скорости.
  double m_r;  ///< Рассчитанный коэффициент корреляции.
  double m_disp;  ///< Рассчитанная дисперсия.

 private:
  HWND m_hWnd;    ///< Дескриптор главного окна.
  int m_nPoints;  ///< Текущее количество точек.
  double m_Cb;  ///< Начальная концентрация вещества B.
  double m_Cc;  ///< Начальная концентрация вещества C.

  /**
   * \brief Регистрирует класс главного окна.
   *
   * Заполняет структуру \c WNDCLASS и регистрирует её с помощью \c
   * RegisterClass.
   *
   * \param hInstance Дескриптор экземпляра приложения.
   * \return \c true, если регистрация прошла успешно, иначе \c false.
   */
  bool RegisterWindowClass(HINSTANCE hInstance);

  /**
   * \brief Создаёт дочерние элементы управления в главном окне.
   *
   * Функция создаёт и размещает на главном окне все необходимые элементы
   * управления:
   * - Статические надписи и поля ввода для экспериментальных данных.
   * - Поля для ввода количества точек, начальных концентраций и т.д.
   * - Кнопки для выполнения расчёта и выхода из приложения.
   * - Метка для отображения координат курсора.
   */
  void CreateChildControls();

  /**
   * \brief Статическая оконная процедура для главного окна.
   *
   * Извлекает указатель на объект \c MainWindow из GWLP_USERDATA и передаёт
   * сообщение в член-функцию \c WndProc для дальнейшей обработки.
   *
   * \param hwnd Дескриптор окна.
   * \param msg Код сообщения.
   * \param wParam Дополнительная информация о сообщении.
   * \param lParam Дополнительная информация о сообщении.
   * \return Результат обработки сообщения.
   */
  static LRESULT CALLBACK StaticWndProc(HWND hwnd, UINT msg, WPARAM wParam,
                                        LPARAM lParam);

  /**
   * \brief Член-функция оконной процедуры.
   *
   * Обрабатывает сообщения окна, такие как:
   * - \c WM_CREATE для создания дочерних элементов,
   * - \c WM_MOUSEMOVE для обновления координат,
   * - \c WM_COMMAND для обработки команд элементов управления,
   * - \c WM_PAINT для перерисовки графика,
   * - \c WM_DESTROY для завершения работы приложения.
   *
   * \param msg Код сообщения.
   * \param wParam Дополнительная информация о сообщении.
   * \param lParam Дополнительная информация о сообщении.
   * \return Результат обработки сообщения.
   */
  LRESULT WndProc(UINT msg, WPARAM wParam, LPARAM lParam);

  /**
   * \brief Обрабатывает сообщения WM_COMMAND.
   *
   * Функция анализирует идентификатор команды, полученный в \c wParam, и
   * выполняет соответствующие действия, такие как изменение количества точек,
   * запуск расчёта или выход из приложения.
   *
   * \param wParam Содержит идентификатор команды и сведения о событии.
   * \param lParam Дополнительная информация о сообщении (не используется).
   */
  void OnCommand(WPARAM wParam, LPARAM lParam);

  /**
   * \brief Выполняет расчёт параметров реакции и перерисовывает окно.
   *
   * Функция считывает данные из полей ввода, вызывает метод \c
   * ChemCalculation::Calculate для вычисления параметров реакции и, в случае
   * успешного расчёта, инициирует перерисовку главного окна, а также отображает
   * окно результатов.
   */
  void OnCalculateAndRedraw();

  /**
   * \brief Обрабатывает сообщение WM_MOUSEMOVE для обновления координат
   * курсора.
   *
   * Функция получает координаты курсора, определяет, находится ли он в области
   * графика, и, если да, вычисляет модельные координаты (например, время и
   * концентрацию), которые отображаются в метке.
   *
   * \param wParam Содержит информацию о кнопках мыши (не используется).
   * \param lParam Содержит координаты курсора в клиентских координатах.
   */
  void OnMouseMove(WPARAM wParam, LPARAM lParam);

  bool m_inChartArea;  ///< Флаг, показывающий, находится ли курсор в области
                       ///< графика.
  bool m_initializing;  ///< Флаг, указывающий, что в данный момент идет
                        ///< инициализация дочерних элементов.
};

#endif  // MAINWINDOW_H
